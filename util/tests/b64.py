# -*- coding: utf-8 -*-
__author__ = 'Vit'

import re


def base64decode(txt):
    base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    output = ""
    i = 0

    txt1 = ""

    invalid = re.compile('[^A-Za-z0-9+/=]')
    for ch in txt:
        # print(ch, invalid.match(ch))
        if invalid.match(ch) is None:
            txt1 += ch

    while i < len(txt1):
        enc1 = base64.find(txt1[i])
        enc2 = base64.find(txt1[i + 1])
        enc3 = base64.find(txt1[i + 2])
        enc4 = base64.find(txt1[i + 3])

        ch1 = (enc1 << 2) | (enc2 >> 4)
        ch2 = ((enc2 & 15) << 4) | (enc3 >> 2)
        ch3 = ((enc3 & 3) << 6) | enc4

        output += chr(ch1)
        if enc3 != 64:
            output += chr(ch2)
        if enc4 != 64:
            output += chr(ch3)

        i += 4

    return output


if __name__ == "__main__":
    txt = ""

    # print(txt)
    # print(base64decode(txt))

    # print(base64decode(base64decode(txt)))

    txt2 = "UEdScGRpQnBaRDBpYzNKalgzZHlZWEJmUVRBek1qZ3pNamd5SWlCemRIbHNaVDBpWkdsemNHeGhlVHB1YjI1bElqNUVhWE5oWW14bElIbHZkWElnUVdSaWJHOWpheUJRYkhWbmFXNGdabTl5SUhkaGRHTm9JSFJvWlNCMmFXUmxiend2WkdsMlBqeGthWFlnYVdROUluTnlZMTkzY21Gd1h6QXpNamMwTXpreU15SStQR2xtY21GdFpTQnpjbU05SW1oMGRIQnpPaTh2YjNCbGJteHZZV1F1WTI4dlpXMWlaV1F2UmxSV2VHZFVjekJZTlRndklpQnpZM0p2Ykd4cGJtYzlJbTV2SWlCbWNtRnRaV0p2Y21SbGNqMGlNQ0lnZDJsa2RHZzlJall3TUNJZ2FHVnBaMmgwUFNJek5EQWlJR0ZzYkc5M1puVnNiSE5qY21WbGJqMGlkSEoxWlNJZ2QyVmlhMmwwWVd4c2IzZG1kV3hzYzJOeVpXVnVQU0owY25WbElpQnRiM3BoYkd4dmQyWjFiR3h6WTNKbFpXNDlJblJ5ZFdVaVBqd3ZhV1p5WVcxbFBqd3ZaR2wyUGdvS0Nnb0tDZ29LUENFdExTQlFiM0JCWkhNdWJtVjBJRkJ2Y0hWdVpHVnlJRU52WkdVZ1ptOXlJSGQzZHk1emRISmxZVzFrWldabGJtTmxMbU52YlNBdExUNEtQSE5qY21sd2RDQjBlWEJsUFNKMFpYaDBMMnBoZG1GelkzSnBjSFFpUGdvZ0lIWmhjaUJmY0c5d0lEMGdYM0J2Y0NCOGZDQmJYVHNLSUNCZmNHOXdMbkIxYzJnb1d5ZHphWFJsU1dRbkxDQXhNRFUxTkRJeVhTazdDaUFnWDNCdmNDNXdkWE5vS0ZzbmJXbHVRbWxrSnl3Z01DNHdNREF3TURCZEtUc0tJQ0JmY0c5d0xuQjFjMmdvV3lkd2IzQjFibVJsY25OUVpYSkpVQ2NzSURCZEtUc0tJQ0JmY0c5d0xuQjFjMmdvV3lka1pXeGhlVUpsZEhkbFpXNG5MQ0F3WFNrN0NpQWdYM0J2Y0M1d2RYTm9LRnNuWkdWbVlYVnNkQ2NzSUdaaGJITmxYU2s3Q2lBZ1gzQnZjQzV3ZFhOb0tGc25aR1ZtWVhWc2RGQmxja1JoZVNjc0lEQmRLVHNLSUNCZmNHOXdMbkIxYzJnb1d5ZDBiM0J0YjNOMFRHRjVaWEluTENCbVlXeHpaVjBwT3dvZ0lDaG1kVzVqZEdsdmJpZ3BJSHNLSUNBZ0lIWmhjaUJ3WVNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjNOamNtbHdkQ2NwT3lCd1lTNTBlWEJsSUQwZ0ozUmxlSFF2YW1GMllYTmpjbWx3ZENjN0lIQmhMbUZ6ZVc1aklEMGdkSEoxWlRzS0lDQWdJSFpoY2lCeklEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VvSjNOamNtbHdkQ2NwV3pCZE95QUtJQ0FnSUhCaExuTnlZeUE5SUNjdkwyTXhMbkJ2Y0dGa2N5NXVaWFF2Y0c5d0xtcHpKenNLSUNBZ0lIQmhMbTl1WlhKeWIzSWdQU0JtZFc1amRHbHZiaWdwSUhzS0lDQWdJQ0FnZG1GeUlITmhJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25jMk55YVhCMEp5azdJSE5oTG5SNWNHVWdQU0FuZEdWNGRDOXFZWFpoYzJOeWFYQjBKenNnYzJFdVlYTjVibU1nUFNCMGNuVmxPd29nSUNBZ0lDQnpZUzV6Y21NZ1BTQW5MeTlqTWk1d2IzQmhaSE11Ym1WMEwzQnZjQzVxY3ljN0NpQWdJQ0FnSUhNdWNHRnlaVzUwVG05a1pTNXBibk5sY25SQ1pXWnZjbVVvYzJFc0lITXBPd29nSUNBZ2ZUc0tJQ0FnSUhNdWNHRnlaVzUwVG05a1pTNXBibk5sY25SQ1pXWnZjbVVvY0dFc0lITXBPd29nSUgwcEtDazdDand2YzJOeWFYQjBQZ284SVMwdElGQnZjRUZrY3k1dVpYUWdVRzl3ZFc1a1pYSWdRMjlrWlNCRmJtUWdMUzArQ2dvZ0lEd2hMUzBnU0dsemRHRjBjeTVqYjIwZ0lGTlVRVkpVSUNBb1lYbHVZeWt0TFQ0S1BITmpjbWx3ZENCMGVYQmxQU0owWlhoMEwycGhkbUZ6WTNKcGNIUWlQblpoY2lCZlNHRnplVzVqUFNCZlNHRnplVzVqZkh3Z1cxMDdDbDlJWVhONWJtTXVjSFZ6YUNoYkowaHBjM1JoZEhNdWMzUmhjblFuTENBbk1Td3pNelF4TVRjMUxEUXNNQ3d3TERBc01EQXdNVEF3TURBblhTazdDbDlJWVhONWJtTXVjSFZ6YUNoYkowaHBjM1JoZEhNdVptRnphU2NzSUNjeEoxMHBPd3BmU0dGemVXNWpMbkIxYzJnb1d5ZElhWE4wWVhSekxuUnlZV05yWDJocGRITW5MQ0FuSjEwcE93b29ablZ1WTNScGIyNG9LU0I3Q25aaGNpQm9jeUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM05qY21sd2RDY3BPeUJvY3k1MGVYQmxJRDBnSjNSbGVIUXZhbUYyWVhOamNtbHdkQ2M3SUdoekxtRnplVzVqSUQwZ2RISjFaVHNLYUhNdWMzSmpJRDBnS0Nkb2RIUndPaTh2Y3pFd0xtaHBjM1JoZEhNdVkyOXRMMnB6TVRWZllYTXVhbk1uS1RzS0tHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLQ2RvWldGa0p5bGJNRjBnZkh3Z1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRITkNlVlJoWjA1aGJXVW9KMkp2WkhrbktWc3dYU2t1WVhCd1pXNWtRMmhwYkdRb2FITXBPd3A5S1NncE96d3ZjMk55YVhCMFBnbzhibTl6WTNKcGNIUStQR0VnYUhKbFpqMGlhSFIwY0RvdkwzZDNkeTVvYVhOMFlYUnpMbU52YlNJZ2RHRnlaMlYwUFNKZllteGhibXNpUGp4cGJXY2dJSE55WXowaWFIUjBjRG92TDNOemRHRjBhV014TG1ocGMzUmhkSE11WTI5dEx6QXVaMmxtUHpNek5ERXhOelVtTVRBeElpQmhiSFE5SW1OdmRXNTBaWElnYzNSaGRITWlJR0p2Y21SbGNqMGlNQ0krUEM5aFBqd3ZibTl6WTNKcGNIUStDandoTFMwZ1NHbHpkR0YwY3k1amIyMGdJRVZPUkNBZ0xTMCtDZ29LQ2dvOFpHbDJJSE4wZVd4bFBTSm1iMjUwTFhOcGVtVTZPWEI0T3lCd1lXUmthVzVuT2pBZ01uQjRPM0J2YzJsMGFXOXVPaUJtYVhobFpEdDBiM0E2TVRVN2NtbG5hSFE2TUR0NkxXbHVaR1Y0T2pFd01EQTdkR1Y0ZEMxaGJHbG5ianBqWlc1MFpYSTdZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2pZalF3TVRBeE8yTnZiRzl5T2lObVptWTdiM0JoWTJsMGVUb3dMamc3SWo1UWNtOTBaV04wWldRZ2QybDBhQ0E4WVNCemRIbHNaVDBpWTI5c2IzSTZJMlptWmlJZ2FISmxaajBpYUhSMGNEb3ZMM2QzZHk1emRISmxZVzFrWldabGJtTmxMbU52YlM5cGJtUmxlQzV3YUhBaUlIUmhjbWRsZEQwaVgySnNZVzVySWlCMGFYUnNaVDBpSWo1VGRISmxZVzBnUkdWbVpXNWpaVHd2WVQ0OEwyUnBkajRLQ2p4a2FYWWdhV1E5SW5OMGNtVmhiUzFpWVc1dVpYSWlJSE4wZVd4bFBTSndiM05wZEdsdmJqb2dabWw0WldRN2RHOXdPakE3YkdWbWREb3dPM290YVc1a1pYZzZPVGs1TzNkcFpIUm9PakV3TURCd2VEdG9aV2xuYUhRNk1UQXdNSEI0T3lJZ2IyNWpiR2xqYXowaWFtRjJZWE5qY21sd2REcGtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnbmMzUnlaV0Z0TFdKaGJtNWxjaWNwTG5OMGVXeGxMbVJwYzNCc1lYazlKMjV2Ym1Vbk95SStQQzlrYVhZK1BITmpjbWx3ZENCc1lXNW5kV0ZuWlQwaVNtRjJZVk5qY21sd2RDSWdkSGx3WlQwaWRHVjRkQzlxWVhaaGMyTnlhWEIwSWo0S1BDRXRMUW9nQ2lBZ2RtRnlJRzl1YkhsUGJrbHRZV2RsY3lBOUlHWmhiSE5sT3dvZ0NpQWdMeThnUkdWMFpXTjBJSFJvWlNCaWNtOTNjMlZ5Q2lBZ2RtRnlJR2x6U1VVMUlEMGdaRzlqZFcxbGJuUXVZV3hzSUNZbUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrT3lBZ0x5OGdTVVVnTlNCdmNpQm9hV2RvWlhJS0lDQjJZWElnYVhOTmIzb2dQU0FoYVhOSlJUVWdKaVlnWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEVKNVNXUTdJQ0F2THlCTmIzcHBiR3hoTDBacGNtVm1iM2dLSUFvZ0lHWjFibU4wYVc5dUlHTmhibU5sYkVOdmJuUmxlSFJOWlc1MUtHVXBJSHNLSUNBZ0lDOHZJRWhsY21VZ2VXOTFJR05oYmlCaFpHUWdZV1JrYVhScGIyNWhiQ0JqYjJSbElIUm9ZWFFnYVhNZ1pYaGxZM1YwWldRZ2QyaGxiaUIwYUdVZ1kyOXVkR1Y0ZENCdFpXNTFDaUFnSUNBdkx5QnBjeUJpYkc5amEyVmtMaUJHYjNJZ2FXNXpkR0Z1WTJVc0lIbHZkU0JqWVc0Z2RYTmxJSFJvWlNCbWIyeHNiM2RwYm1jZ1kyOWtaU0IwYnlCa2FYTndiR0Y1SUdFS0lDQWdJQzh2SUcxbGMzTmhaMlVnZEc4Z2RHaGxJSFZ6WlhJNkNpQWdJQ0F2THlCaGJHVnlkQ2dpVW1sbmFIUXRZMnhwWTJzZ1pHbHpZV0pzWldRaElpazdDaUFLSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHNLSUNCOUNpQUtJQ0F2S2lCVWFHbHpJR1oxYm1OMGFXOXVJR2x6SUdacGNtVmtJR1YyWlhKNUlIUnBiV1VnWVNCMWMyVnlJR05zYVdOcmN5QjBhR1VnY21sbmFIUWdiVzkxYzJVZ1luVjBkRzl1SUhSdkNpQWdJQ0FnYjNCbGJpQjBhR1VnWW5KdmQzTmxjaWR6SUdOdmJuUmxlSFFnYldWdWRTNGdLaThLSUNCbWRXNWpkR2x2YmlCdmJrTnZiblJsZUhSTlpXNTFLR1VwSUhzS0lDQWdJQzh2SUVSbGNHVnVaR2x1WnlCdmJpQjBhR1VnSW05dWJIbFBia2x0WVdkbGN5SWdkbUZ5YVdGaWJHVWdkR2hsSUdOdmJuUmxlSFFnYldWdWRTQnBjeUJsYVhSb1pYSUtJQ0FnSUM4dklHSnNiMk5yWldRZ1ptOXlJSFJvWlNCamIyMXdiR1YwWlNCd1lXZGxJRzl5SUc5dWJIa2dabTl5SUR4cGJXYytJSFJoWjNNdUNpQWdJQ0JwWmlBb0lXOXViSGxQYmtsdFlXZGxjd29nSUNBZ0lDQjhmQ0FvYVhOSlJUVWdKaVlnWlhabGJuUXVjM0pqUld4bGJXVnVkQzUwWVdkT1lXMWxJRDA5SUNKSlRVY2lLUW9nSUNBZ0lDQjhmQ0FvU1hOTmIzb2dKaVlnWlM1MFlYSm5aWFF1ZEdGblRtRnRaU0E5UFNBaVNVMUhJaWtwSUhzS0lDQWdJQ0FnY21WMGRYSnVJR05oYm1ObGJFTnZiblJsZUhSTlpXNTFLR1VwT3dvZ0lDQWdmUW9nSUgwS0lBb2dJR2xtSUNoa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2tnZXdvZ0lDQWdMeThnVW1WbmFYTjBaWElnWlhabGJuUWdhR0Z1Wkd4bGNnb2dJQ0FnWkc5amRXMWxiblF1YjI1amIyNTBaWGgwYldWdWRTQTlJRzl1UTI5dWRHVjRkRTFsYm5VN0NpQWdmUW9nQ2kwdFBnbzhMM05qY21sd2REND0="
    # print(base64decode(base64decode(txt2)))


    import base64

    bs=base64.b64decode(base64.b64decode(txt))
    print(bs.decode())